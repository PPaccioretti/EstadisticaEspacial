---
title: "Ejemplo 2: Modelación de casos de COVID"
format: html
editor_options: 
  chunk_output_type: console
---

## Motivación 

Al comenzar la pandemia producida por COVID-19, surgió el interés de analizar 
la distribución espacial de los riesgos infección.

Ajustamos un modelo lineal generalizado con efectos aleatorios espaciales con 
`INLA` para estimar riesgo de aparición del virus en diferentes radios censales 
de la Ciudad de Córdoba, Argentina.


# Datos

Se trabajará con una base de datos vectorial (.gpkg) que incluye polígonos de 
los radios censales de Córdoba y Gran Córdoba. 
Para cada radio censal se cuenta con información de

- Cantidad de habitantes en miles de personas (Poblacion)
- Nivel de fragmentación urbano (fragmentacion)
- Valor de la Tierra promedio
- Porcentaje de hogares con nececsidades básicas insatisfechas (HogaresNBI)
- Porcentaje de hogares con hacinamiento (HogariesHacinamiento)
- Porcentaje de hogares con Jefe/Jefa con al menos nivel de estudio 
universitario (HogariesJefe.Univ.)
- Porcentaje de hogares con computadoras (HogaresConComput.)
- Cantidad de habitantes por $km^2$ (HabSup)
- Cantidad de bancos dentro del radio censal (Bancos)
- Cantidad de farmacias dentro del radio censal (Farmacias)
- Cantidad de centros de salud dentro del radio censal (EstSaludInt)
- Cantidad de bancos, farmacias y centros de salud del radio censal (Ban_Farm_Salud)
- Cantidad de casos detectados de COVID-19 (Casos)


### Lectura base de datos

```{r}
#| code-fold: true
#| code-summary: "Carga paquetes"

library(sf)
library(spdep)
library(tmap)
library(INLA)

```


```{r}
datos <- st_read("data/Base_07_07_radios.gpkg", quiet = TRUE)
```


- Cálculo de número de casos esperados por radio censal 

```{r}
datos$E <- datos$Poblacion * sum(datos$Casos) / sum(datos$Poblacion)
```


```{r}
tm_shape(datos) +
  tm_polygons(fill = 'E')
```


- Cálculo de cociente de infección estandarizada (_Standardized Infection Ratio_,
SIR) por radio censal 

```{r}
datos$SIR <- datos$Casos / datos$E
```

```{r}
tm_shape(datos) +
  tm_polygons(fill = 'SIR')
```


<!-- - Cálculo de valor de la tierra relativo al promedio -->

<!-- ```{r} -->
<!-- datos$ValorTierra <- datos$ValorTierra / mean(datos$ValorTierra) -->
<!-- ``` -->


- Referencia para el efecto aleatorio y el término del error

```{r}
datos$re_u <- 1:nrow(datos)
datos$re_v <- 1:nrow(datos)

```


## Ajuste del Modelo

### Generación de lista con vecindarios

```{r}
# Generación de lista con vecindarios
nb <- poly2nb(datos)

head(nb)

plot(st_geometry(datos), border = "grey", lwd = 0.5)
plot(
  nb,
  coordinates(as(datos, "Spatial")),
  add = TRUE,
  col = "blue",
  points = FALSE,
  lwd = 0.5
)

```


```{r}
# Generación de vecindarios para INLA
file_adj <- tempfile("map.adj1")
nb2INLA(file_adj, nb)
g <- inla.read.graph(filename = file_adj)

```

```{r}
#| include: false
#| echo: false
#| purl: false
#| 
# formula  <-
#   Casos ~ Bancos + ValorTierra +  f(re_u, model = "besag", graph = g) + f(re_v, model = "iid")

```


```{r}

# Ajuste del Modelo inflado en ceros
summary(datos)


formula  <-
  Casos ~ 
  Fragmentacion +  
  HogaresNBI + 
  HogaresHacinamiento +
  HogaresJefe.Univ. + 
  Bancos + 
  f(re_u, model = "besag", graph = g) + 
  f(re_v, model = "iid")


res_inflpoi <-
  inla(
    formula,
    family = "zeroinflatedpoisson1",
    data = datos,
    E = E,
    control.predictor = list(compute = TRUE)
  )
summary(res_inflpoi)

```

# Visualización Espacial

## Visualización Interactiva

```{r}
datos$RR <- res_inflpoi$summary.fitted.values[, "mean"]
datos$RR_LI <- res_inflpoi$summary.fitted.values[, "0.025quant"]
datos$RR_LS <- res_inflpoi$summary.fitted.values[, "0.975quant"]

popup_vars <- c(
  "Fragmentación (Nivel)" = 'Fragmentacion',
  "Valor Tierra Medio ($/m2)" = 'ValorTierra',
  "Hogares NBI (%)" = 'HogaresNBI',
  "Hogares Hacinamiento (%)" = 'HogaresHacinamiento',
  "Hogares Jefe Univ.(%)" = 'HogaresJefe.Univ.',
  "Bancos",
  "Casos",
  "Población" = 'Poblacion',
  "E",
  "SIR",
  "RR_LI",
  "RR",
  "RR_LS"
)

```


```{r}
#| column: screen-inset-right
#| fig-height: 6

tmap_mode('view')
mapas <-
  tm_basemap(c(Urbano = "OpenStreetMap", Satelite = "Esri.WorldImagery")) +
  tm_shape(datos,
           name = 'Casos')  +
  tm_polygons(
    fill = 'Casos',
    fill.scale = tm_scale_intervals(
      style = "fixed",
      breaks = c(0, 1, 2, 3, 5, 10, 15, 25, 36),
      values = "brewer.yl_or_br"),
    fill.legend = tm_legend(title =  "Casos por Radio",
                            scientific = TRUE,
                            format = "f",
                            digits = 0
    ),
    col = "gray50",
    col_alpha = .5,
    popup.vars = popup_vars
  ) +
  
  tm_shape(datos,
           name = 'Tasa de Infección - SIR')  +
  tm_polygons(
    fill = "SIR",
    fill.scale = tm_scale_intervals(
      style = "fixed",
      breaks = c(0, 5, 10, 15, 20, 25, 30, 50, 60, 90),
      values = "brewer.yl_or_br"),
    fill.legend = tm_legend( 
      title = 'SIR',
      scientific = TRUE,
      format = "f",
      digits = 0
    ),
    col = "gray50",
    col_alpha = .5,
    popup.vars = popup_vars
  ) +
  
  tm_shape(datos,
           name = 'Riesgo Relativo')  +
  tm_polygons(
    fill = "RR",
    fill.scale = tm_scale_intervals(
      style = "fixed",
      breaks = c(0.4, 1, 2, 4, 8, 10, 15, 20, 30, 50, 85, 96),
      values = "brewer.yl_or_br"),
    fill.legend = tm_legend( 
       title = "Riesgo Relativo",
      scientific = TRUE,
      format = "f",
      digits = 1
    ),
    col = "gray50",
    col_alpha = .5,
    popup.vars = popup_vars
  )
mapas

```



```{r}
img <-
  "https://ig.conae.unc.edu.ar/wp-content/uploads/sites/68/2022/04/cropped-cromas-68-1.png"

map <-
  tmap_leaflet(mapas) %>%
  leafem::addLogo(img,
                  url = "https://ig.conae.unc.edu.ar/",
                  width = 136,
                  height = 50) %>%
  leaflet::addMiniMap(position = "bottomleft",
                      width = 150,
                      height = 150)
map

# mapshot(map, paste0("Mapa_radios_", format(Sys.time(), "%d_%m_%Y"), ".html"))
```




## Visualización Estática


```{r}
#| eval: false
#| purl: false

tmap_mode('plot')

mapacasos <-
  tm_shape(datos)  +
  tm_polygons(
    fill = "Casos",
    fill.scale = tm_scale_intervals(
      style = "fixed",
      breaks = c(0, 1, 2, 3, 5, 10, 15, 25, 36),
      values = "brewer.yl_or_br"),
    fill.legend = tm_legend(title =  "Casos por Radio",
      scientific = TRUE,
      format = "f",
      digits = 0
    ),
    id = "Casos",
    col = "gray50",
    col_alpha = .5) + 
  tm_scalebar(position = c("right", "bottom")) +
  tm_compass(type = "8star", position = c("left", "bottom"))

mapacasos


mapaSIR <-
  tm_shape(datos)  +
  tm_polygons(
    fill = "SIR",
    fill.scale = tm_scale_intervals(
      style = "fixed",
      breaks = c(0, 5, 10, 15, 20, 25, 30, 50, 60, 90),
      values = "brewer.yl_or_br"),
    fill.legend = tm_legend( 
      title = 'SIR',
      scientific = TRUE,
      format = "f",
      digits = 0
    ),
    id = "SIR",
    col = "gray50",
    col_alpha = .5,
  ) + 
  tm_scalebar (position = c("right", "bottom")) +
  tm_compass(type = "8star", position = c("left", "bottom"))

mapaSIR


mapaRR <-
  tm_shape(datos)  +
  tm_polygons(
    fill = "RR",
    fill.scale = tm_scale_intervals(
      style = "fixed",
      breaks = c(0.4, 1, 2, 4, 8, 10, 15, 20, 30, 50, 85, 96),
      values = "brewer.yl_or_br"),
    fill.legend = tm_legend( 
       title = "Riesgo Relativo",
      scientific = TRUE,
      format = "f",
      digits = 1
    ),
    id = "RR",
    col = "gray50",
    col_alpha = .5
  ) + 
  tm_scalebar(position = c("right", "bottom")) +
  tm_compass(type = "8star", position = c("left", "bottom"))

mapaRR
```

